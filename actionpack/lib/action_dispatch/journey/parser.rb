#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'action_dispatch/journey/parser_extras'
module ActionDispatch
  module Journey
    class Parser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
    14,    16,    15,     7,    23,    17,     8,    19,    18,    14,
    16,    15,     7,    26,    17,     8,    21,    18,    14,    16,
    15,     7,   nil,    17,     8,    21,    18,    14,    16,    15,
     7,   nil,    17,     8,   nil,    18 ]

racc_action_check = [
     0,     0,     0,     0,    19,     0,     0,     1,     0,    21,
    21,    21,    21,    22,    21,    21,    24,    21,     2,     2,
     2,     2,   nil,     2,     2,     2,     2,     7,     7,     7,
     7,   nil,     7,     7,   nil,     7 ]

racc_action_pointer = [
    -2,     7,    16,   nil,   nil,   nil,   nil,    25,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,
   nil,     7,     7,   nil,     7,   nil,   nil ]

racc_action_default = [
   -21,   -21,    -2,    -3,    -4,    -5,    -6,   -21,   -10,   -11,
   -12,   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,   -21,
    -1,   -21,   -21,    27,    -8,    -9,    -7 ]

racc_goto_table = [
     1,    24,    20,    25,   nil,   nil,   nil,    22 ]

racc_goto_check = [
     1,     2,     1,     3,   nil,   nil,   nil,     1 ]

racc_goto_pointer = [
   nil,     0,   -20,   -18,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil ]

racc_goto_default = [
   nil,   nil,     2,     3,     4,     5,     6,     9,    10,    11,
    12,    13 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 12, :_reduce_1,
  1, 12, :_reduce_2,
  1, 12, :_reduce_none,
  1, 13, :_reduce_none,
  1, 13, :_reduce_none,
  1, 13, :_reduce_none,
  3, 16, :_reduce_7,
  3, 14, :_reduce_8,
  3, 14, :_reduce_9,
  1, 17, :_reduce_10,
  1, 15, :_reduce_none,
  1, 15, :_reduce_none,
  1, 15, :_reduce_none,
  1, 15, :_reduce_none,
  1, 15, :_reduce_none,
  1, 20, :_reduce_16,
  1, 18, :_reduce_17,
  1, 19, :_reduce_18,
  1, 21, :_reduce_19,
  1, 22, :_reduce_20 ]

racc_reduce_n = 21

racc_shift_n = 27

racc_token_table = {
  false => 0,
  :error => 1,
  :SLASH => 2,
  :LITERAL => 3,
  :SYMBOL => 4,
  :LPAREN => 5,
  :RPAREN => 6,
  :DOT => 7,
  :STAR => 8,
  :OR => 9,
  :PLUS => 10 }

racc_nt_base = 11

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "SLASH",
  "LITERAL",
  "SYMBOL",
  "LPAREN",
  "RPAREN",
  "DOT",
  "STAR",
  "OR",
  "PLUS",
  "$start",
  "expressions",
  "expression",
  "or",
  "terminal",
  "group",
  "star",
  "symbol",
  "literal",
  "slash",
  "dot",
  "plus" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 6)
  def _reduce_1(val, _values)
     Cat.new(val.first, val.last)
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_2(val, _values)
     val.first
  end
.,.,

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

module_eval(<<'.,.,', 'parser.y', 16)
  def _reduce_7(val, _values)
     Group.new(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 19)
  def _reduce_8(val, _values)
     Or.new([val.first, val.last])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_9(val, _values)
     Or.new([val.first, val.last])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_10(val, _values)
     Star.new(Symbol.new(val.last))
  end
.,.,

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.y', 33)
  def _reduce_16(val, _values)
     Slash.new('/')
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_17(val, _values)
     Symbol.new(val.first)
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 39)
  def _reduce_18(val, _values)
     Literal.new(val.first)
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_19(val, _values)
     Dot.new(val.first)
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 45)
  def _reduce_20(val, _values)
     Plus.new(val.first)
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

    end   # class Parser
    end   # module Journey
  end   # module ActionDispatch
